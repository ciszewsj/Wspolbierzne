#include <stdio.h>
#include <mpi.h>
#include <math.h>

double f(double x) {
    return sin(x); // funkcja, której całkę chcemy policzyć
}

double calculate_integral(double a, double b, int n) {
    double dx = (b - a) / n; // szerokość podprzedziału
    double x;
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        x = a + (i + 0.5) * dx;
        sum += f(x) * dx;
    }
    return sum;
}

int main(int argc, char** argv) {
    int rank, size;
    double a = 0.0, b = 1.0; // granice całkowania
    int n = 10000; // liczba podprzedziałów
    double integral, local_integral;
    double start_time, end_time;
    
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    start_time = MPI_Wtime();

    int chunk_size = n / size;
    int start_index = rank * chunk_size;
    int end_index = (rank + 1) * chunk_size - 1;
    if (rank == size - 1) {
        end_index = n - 1;
    }
    local_integral = calculate_integral(a + start_index * (b - a) / n, a + end_index * (b - a) / n, end_index - start_index + 1);

    MPI_Reduce(&local_integral, &integral, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    end_time = MPI_Wtime();

    if (rank == 0) {
        printf("Wartość całki: %f\n", integral);
        printf("Czas obliczeń: %f s\n", end_time - start_time);
    }

    MPI_Finalize();

    return 0;
}